---
- hosts: all
  gather_facts: yes
  vars:
    - ans_port: 10022

  tasks:
  - name: install python3
    package:
      name: python3
      state: present
  - name: Add new users
    user:
      name: "{{ item }}"
      shell: /bin/bash
    with_items:
      - aardes
      - shahroo

  - name: Remove firewalld
    package:
      name: firewalld
      state: absent

  - name: install epel-release
    package:
      name: epel-release
      state: present

  - name: install packages
    package:
      name: "{{ item }}"
      state: present
    with_items:
      - vim
      - sudo
      - tigervnc-server
      - fluxbox
      - firefox
      - iptables-services
      - fail2ban-server
      - htop
      - nc
      - nmap
      - bind-utils
      - python2
 
  - name: Install openvpn-server
    shell: "curl -L https://raw.githubusercontent.com/alisade/openvpn-install/master/openvpn-install.sh | bash"

  - name: Add aardes user to the sudoers
    copy:
      dest: "/etc/sudoers.d/aardes"
      content: "aardes  ALL=(ALL)  NOPASSWD: ALL"

  - name: Deploy SSH Key
    authorized_key: 
      user: "{{ item }}"
      key: "{{ lookup('file', \"./{{ item }}.pub\") }}"
      state: present
    with_items:
      - aardes
      - shahroo

  - name: Disable SELinux
    selinux:
        state: disabled


  - name: Disable Password Authentication
    lineinfile:
             dest=/etc/ssh/sshd_config
             regexp='^PasswordAuthentication'
             line="PasswordAuthentication no"
             state=present
             backup=yes
  - name: Disable Root Login
    lineinfile:
             dest=/etc/ssh/sshd_config
             regexp='^PermitRootLogin'
             line="PermitRootLogin no"
             state=present
             backup=yes
    notify:
      - "Restart sshd"

  - name: Set configured port fact
    set_fact:
      configured_port: "{{ ans_port }}"

  # From localhost, check if we're able to reach {{ inventory_hostname }} on
  # port 22
  - name: Check if we're using the default SSH port
    wait_for:
      port: "22"
      state: "started"
      host: "{{ inventory_hostname }}"
      connect_timeout: "5"
      timeout: "10"
    delegate_to: "localhost"
    ignore_errors: "yes"
    register: default_ssh

  # If reachable, continue the following tasks with this port
  - name: Set inventory ans_port to default
    set_fact:
      ans_port: "22"
    when: default_ssh is defined and
          default_ssh.state == "started"
    register: ssh_port_set

  # If unreachable on port 22, check if we're able to reach
  # {{ inventory_hostname }} on {{ ans_port }} provided by the inventory
  # from localhost
  - name: Check if we're using the inventory-provided SSH port
    wait_for:
      port: "{{ ans_port }}"
      state: "started"
      host: "{{ inventory_hostname }}"
      connect_timeout: "5"
      timeout: "10"
    delegate_to: "localhost"
    ignore_errors: "yes"
    register: configured_ssh
    when: default_ssh is defined and
          default_ssh.state is undefined

  # If {{ ans_port }} is reachable, we don't need to do anything special
  - name: SSH port is configured properly
    debug:
      msg: "SSH port is configured properly"
    when: configured_ssh is defined and
          configured_ssh.state is defined and
          configured_ssh.state == "started"
    register: ssh_port_set

  # If the SSH port is neither the default or the configured, give up.
  - name: Fail if SSH port was not auto-detected (unknown)
    fail:
      msg: "The SSH port is neither 22 or {{ ans_port }}."
    when: ssh_port_set is undefined

  # Sanity check, make sure Ansible is able to connect to the host
  - name: Confirm host connection works
    ping:

  - name: Template a file to /etc/sysconfig/iptables
    template:
      src: sysconfig/iptables.j2
      dest: /etc/sysconfig/iptables
      owner: root
      group: root
      mode: '0755'

  - name: Setup alternate SSH port
    lineinfile:
      dest: "/etc/ssh/sshd_config"
      regexp: "^Port"
      line: "Port {{ configured_port }}"
    notify:
      - "Restart sshd"
      - "Restart iptables"

  #- name: Setup selinux for alternate SSH port
  #  seport:
  #    ports: "{{ configured_port }}"
  #    proto: "tcp"
  #    setype: "ssh_port_t"
  #    state: "present"

  # Gather facts should be set to false when running this role since it will
  # fail if the Ansible SSH port is not set correctly.
  # We run setup to gather facts here once the SSH port is set up.
  #- name: allow new ssh port
  #  iptables:
  #    chain: INPUT
  #    protocol: tcp
  #    destination_port: "{{ configured_port }}"
  #    jump: ACCEPT
  #    action: insert
  #    rule_num: 1
  - name: Ensure SSH is reloaded if need be
    meta: flush_handlers
  # We're done, make sure ans_port is set properly so that any tasks
  # after this use the right ans_port.
  - name: Ensure we use the configured SSH port for the remainder of the role
    set_fact:
      ans_port: "{{ configured_port }}"
  # Gather facts should be set to false when running this role since it will
  # fail if the Ansible SSH port is not set correctly.
  # We run setup to gather facts here once the SSH port is set up.
  - name: change root password
    user:
      name: root
      update_password: always
      password: ""

  - name: Template a file to /etc/fail2ban/jail.local
    template:
      src: jail.local
      dest: /etc/fail2ban/jail.local
      owner: root
      group: root
      mode: '0755'

  - name: Make sure a service is running
    systemd:
      state: started
      name: fail2ban
      enabled: yes

  - name: Run deferred setup to gather facts
    setup:

  handlers:
  - name: Restart sshd
    service:
      name: sshd
      state: restarted
  - name: Restart iptables
    service:
      name: iptables
      state: restarted
